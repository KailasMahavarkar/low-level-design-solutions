"""First version

Revision ID: 28d67e71100e
Revises: 
Create Date: 2025-03-27 10:06:01.255630

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '28d67e71100e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('operations',
    sa.Column('uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('operation', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('rfa_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sa.Enum('running', 'completed', 'errored', 'paused', 'pending', 'cancelled', name='operationstatus'), nullable=False),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_operations_uuid'), 'operations', ['uuid'], unique=False)
    op.create_table('pizzas',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sa.Enum('ready', 'eaten', 'paused', 'pending', 'cancelled', 'expired', 'modifying', 'frozen', 'creating', 'eating', name='pizzastatus'), nullable=False),
    sa.Column('version', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('region', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('creation', sa.DateTime(), nullable=False),
    sa.Column('tier', sa.Enum('premium', 'enterprise', 'trial', name='pizzatier'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_pizzas_id'), 'pizzas', ['id'], unique=False)
    op.create_index(op.f('ix_pizzas_status'), 'pizzas', ['status'], unique=False)
    op.create_table('rfa',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('requester', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('operation', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sa.Enum('approved', 'denied', 'pending', 'unknown', name='rfastatus'), nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('approver', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('approval_channel', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('request_channel', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('expiration', sa.DateTime(), nullable=True),
    sa.Column('creation', sa.DateTime(), nullable=True),
    sa.Column('approval_time', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_rfa_id'), 'rfa', ['id'], unique=False)
    op.create_index(op.f('ix_rfa_status'), 'rfa', ['status'], unique=False)
    op.create_table('users',
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('disabled', sa.Boolean(), nullable=True),
    sa.Column('organization', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('email')
    )
    op.create_table('events',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('actor_email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('pizza_id', sa.Uuid(), nullable=True),
    sa.Column('time', sa.DateTime(), nullable=False),
    sa.Column('event_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['pizza_id'], ['pizzas.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_events_id'), 'events', ['id'], unique=False)
    op.create_table('tasks',
    sa.Column('uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('task_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('region', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('operation_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('retries', sa.Integer(), nullable=False),
    sa.Column('max_retries', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('running', 'completed', 'errored', 'pending', 'waiting', 'pending_wait', 'cancelled', name='taskstatus'), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('last_refresh', sa.DateTime(), nullable=True),
    sa.Column('error', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('wait_time', sa.Integer(), nullable=True),
    sa.Column('max_wait_time', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['operation_id'], ['operations.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('tasks')
    op.drop_index(op.f('ix_events_id'), table_name='events')
    op.drop_table('events')
    op.drop_table('users')
    op.drop_index(op.f('ix_rfa_status'), table_name='rfa')
    op.drop_index(op.f('ix_rfa_id'), table_name='rfa')
    op.drop_table('rfa')
    op.drop_index(op.f('ix_pizzas_status'), table_name='pizzas')
    op.drop_index(op.f('ix_pizzas_id'), table_name='pizzas')
    op.drop_table('pizzas')
    op.drop_index(op.f('ix_operations_uuid'), table_name='operations')
    op.drop_table('operations')
    # ### end Alembic commands ###
