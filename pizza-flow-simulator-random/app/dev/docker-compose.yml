---
services:
  app-server:
    build:
     context: ..
     dockerfile: dev/Dockerfile-server
    command: /run.sh
    container_name: app-server
    volumes:
      - ../backend/:/app/backend
      - ../frontend/:/app/frontend
    ports:
      - 8080:8080
    environment:
      - DB_HOST=app-psql
      - DB_USER=saas
      - DB_PASSWORD=saas
      - DB_NAME=saas
      - LOG_FMT=dev
      - FRONTEND_SERVER=static
      - REDIS_HOST=app-redis
    depends_on:
      app-psql:
        condition: service_healthy
      app-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  app-psql:
    image: "postgres:17-alpine"
    container_name: app-db
    volumes:
      - "pizza-pg-data:/var/lib/postgresql/data"
    shm_size: 128mb
    environment:
      POSTGRES_USER: saas
      POSTGRES_PASSWORD: saas
      POSTGRES_DB: saas
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saas"]
      interval: 5s
      timeout: 5s
      retries: 5
  app-redis:
    image: redis/redis-stack-server:latest
    container_name: app-redis
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    ports: ["6379:6379"]
  app-worker:
    build:
      context: ..
      dockerfile: dev/Dockerfile-worker
    container_name: app-worker
    stop_grace_period: 30s
    environment:
      - SERVER_URL=http://app-server:8080
      - DRY_RUN=true
      - AUTH_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ3b3JrZXIiLCJwb3AiOiJldS13ZXN0LTMifQ.s0gkRkN1kq0hDacK5No80ZIJtiT9cxsmWiMwvLWH5kY
    volumes:
      - ../worker/:/app/worker
      - $HOME/.aws/config:/root/.aws/config:ro
      - $HOME/.aws/credentials:/root/.aws/credentials:ro
    depends_on:
      app-server:
        condition: service_healthy
    restart: on-failure:3
volumes:
  pizza-pg-data:
